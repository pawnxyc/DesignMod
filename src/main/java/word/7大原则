1.单一职责原则：一个模块或者一个类尽量做到只会有一类原因才会改变内容，userDao，只处理用户信息。
2.接口隔离原则（interface segregation principle）：尽量接口职责单一化
3.依赖倒转：继承时 尽量不要去重写父类的方法。
4.开闭原则：对扩展开放，对修改关闭。
5.迪米特法则。

门面模式facade。为一组子接口提供一个高级的统一接口，降低学习类似功能子系统的难度。列如controller和service的关系
定义一个统一的入口，解决问题实际方案，客户端不关心。
23种设计模式
1.创建型模式：工厂方法，抽象工厂方法，单例，原型模式，建造者模式。
工厂方法就是提供一个工厂类，来创建实现了相同接口的类的实列，

2.结构型模式：适配器模式、装饰器模式、代理模式、门面模式、桥接模式、组合模式、享元模式。

类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。

对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。

接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可。
桥接模式：jdbc连接不同的数据库 用的是同一套代码。只是驱动不一样。

3.事件处理型模式：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、
命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。